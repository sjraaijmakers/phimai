---
import { localizePath } from 'astro-i18next';
import { t } from 'i18next';

export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<nav class={`navigation ${className}`}>
  <div class="nav-container">
    {
      className.includes('guide-nav') && (
        <div class="nav-menu guide-nav">
          <a href={localizePath("/")} class="nav-link back-home">
            ‚Üê {t('nav.backHome')}
          </a>
        </div>
      )
    }

    {
      !className.includes('guide-nav') && (
        <div class="nav-menu">
          <a href="#about" class="nav-link">
            {t('nav.about')}
          </a>
          <a href="#gallery" class="nav-link">
            {t('nav.gallery')}
          </a>
          <a href="#location" class="nav-link">
            {t('nav.location')}
          </a>
          <a href="#booking" class="nav-link">
            {t('nav.bookNow')}
          </a>
          <a href="#contact" class="nav-link">
            {t('nav.contact')}
          </a>
        </div>
      )
    }
  </div>

  <script>
    // Only run navigation logic on index page
    if (!window.location.pathname.includes('/guide')) {
      // Active navigation functionality
      document.addEventListener('DOMContentLoaded', () => {
        // Initialize for both desktop and mobile navigation
        const navLinks = Array.from(document.querySelectorAll('.nav-link'));
        const sections = Array.from(document.querySelectorAll('section[id]'));

        console.log(
          'Navigation initialized with',
          navLinks.length,
          'links and',
          sections.length,
          'sections'
        );
        let scrollTimeout;
        let lastScrollPosition = 0;
        let isNavigating = false;

        function updateActiveNav() {
          const scrollPosition = window.scrollY + window.innerHeight / 3; // Use 1/3 of viewport height as trigger point
          const firstSectionTop = sections.length ? sections[0].offsetTop : 0;

          // While above first section (still in hero), no link should be active
          if (scrollPosition < firstSectionTop) {
            navLinks.forEach(link => link.classList.remove('active'));
            return;
          }

          // Find the current section based on scroll position
          let currentSection = null;

          for (let i = sections.length - 1; i >= 0; i--) {
            const section = sections[i];
            if (section && section.offsetTop !== undefined) {
              const sectionTop = section.offsetTop;

              if (scrollPosition >= sectionTop) {
                currentSection = section;
                break;
              }
            }
          }

          if (currentSection) {
            const sectionId = currentSection.getAttribute('id');
            if (sectionId) {
              // Remove active class from all nav links
              navLinks.forEach(link => link.classList.remove('active'));

              // Add active class to corresponding nav link
              const activeLink = document.querySelector(
                `.nav-link[href="#${sectionId}"]`
              );
              if (activeLink) {
                activeLink.classList.add('active');
                console.log(
                  'Set active:',
                  sectionId,
                  'on link:',
                  activeLink.textContent
                );
              } else {
                console.log('No active link found for section:', sectionId);
              }
            }
          }
        }

        // Debounced scroll handler to prevent intermediate activations
        function handleScroll() {
          // Don't update active nav during programmatic navigation
          if (isNavigating) return;

          const currentScrollPosition = window.scrollY;
          const scrollDifference = Math.abs(
            currentScrollPosition - lastScrollPosition
          );

          // Only update if there's significant scroll movement or after scrolling stops
          if (scrollDifference > 50) {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
              updateActiveNav();
            }, 100);
          }

          lastScrollPosition = currentScrollPosition;
        }

        // Handle navigation clicks - immediately set active state
        navLinks.forEach(link => {
          link.addEventListener('click', () => {
            const href = link.getAttribute('href');
            if (href && href.startsWith('#')) {
              isNavigating = true;

              // Immediately set the clicked link as active
              navLinks.forEach(navLink => navLink.classList.remove('active'));
              link.classList.add('active');

              // Reset navigation flag after scroll completes
              setTimeout(() => {
                isNavigating = false;
              }, 1000);
            }
          });
        });

        // Update on scroll with debouncing
        window.addEventListener('scroll', handleScroll);

        // Update on page load
        updateActiveNav();
      });
    }
  </script>

  <style>
    /* ===== NAVIGATION ===== */
    .navigation {
      display: flex;
      gap: var(--space-xl);
      z-index: 1000;
    }

    .nav-container {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
    }

    .nav-menu {
      display: flex;
      gap: var(--space-xl);
      align-items: center;
    }

    .nav-link {
      text-decoration: none;
      color: var(--color-text);
      font-weight: 500;
      font-size: 0.9rem;
      letter-spacing: 0.02em;
      transition: var(--transition);
      position: relative;
      font-family: var(--font-secondary);
      padding: 6px 12px;
      border-radius: 20px;
      background: transparent;
    }

    .nav-link:hover {
      color: var(--color-secondary);
      background: rgba(139, 115, 85, 0.05);
      transform: translateY(-1px);
    }

    .nav-link.active {
      background: var(--gradient-primary);
      color: var(--color-white);
    }

    /* Mobile navigation */
    .navigation.mobile {
      flex-direction: column;
      gap: var(--space-sm);
      width: 100%;
    }

    .navigation.mobile .nav-link {
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    /* Guide navigation */
    .guide-nav {
      justify-content: center;
      width: 100%;
    }

    .guide-nav .back-home {
      color: var(--color-primary);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: var(--space-xs);
    }

    .guide-nav .back-home:hover {
      color: var(--color-text);
      transform: translateX(-2px);
    }
  </style>
</nav>
