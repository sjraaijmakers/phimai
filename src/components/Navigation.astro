---
import { t } from "i18next";
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

---

<nav class={`navigation ${className}`}>
  <div class="nav-container">
    {className.includes('guide-nav') && (
      <div class="nav-menu guide-nav">
        <a href="/" class="nav-link back-home">{t("nav.backHome")}</a>
          ‚Üê {t('nav.backHome')}
        </a>
      </div>
    )}
    
    {!className.includes('guide-nav') && (
      <div class="nav-menu">
        <a href="#about" class="nav-link">{t('nav.about')}</a>
        <a href="#gallery" class="nav-link">{t('nav.gallery')}</a>
        <a href="#location" class="nav-link">{t('nav.location')}</a>
        <a href="#booking" class="nav-link nav-book-now">{t('nav.bookNow')}</a>
        <a href="#contact" class="nav-link">{t('nav.contact')}</a>
      </div>
    )}
  </div>
</nav>

<style>
  /* ===== NAVIGATION ===== */
  .navigation {
    display: flex;
    gap: var(--space-xl);
    z-index: 1000;
  }

  .nav-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  .nav-menu {
    display: flex;
    gap: var(--space-xl);
    align-items: center;
  }

  .nav-link {
    text-decoration: none;
    color: #2c2c2c;
    font-weight: 500;
    font-size: 0.9rem;
    letter-spacing: 0.02em;
    transition: var(--transition);
    position: relative;
    font-family: var(--font-secondary);
    padding: 6px 12px;
    border-radius: 20px;
    background: transparent;
  }

  .nav-link:hover { 
    color: var(--color-secondary);
    background: rgba(139, 115, 85, 0.05);
    transform: translateY(-1px);
  }

  .nav-link.active {
    background: var(--gradient-primary);
    color: var(--color-white);
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.2);
  }

  /* Remove the underline effects */
  .nav-link::after {
    display: none;
  }

  .navigation a {
    text-decoration: none;
    color: #2c2c2c;
    font-weight: 500;
    font-size: 0.9rem;
    letter-spacing: 0.02em;
    transition: var(--transition);
    position: relative;
    font-family: var(--font-secondary);
    padding: 6px 12px;
    border-radius: 20px;
    background: transparent;
  }

  .navigation a:hover { 
    color: var(--color-secondary);
    background: rgba(139, 115, 85, 0.05);
    transform: translateY(-1px);
  }

  .navigation a.active {
    background: var(--gradient-primary);
    color: var(--color-white);
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.2);
  }

  /* Remove the underline effects */
  .navigation a::after {
    display: none;
  }

  .navigation.mobile {
    flex-direction: column;
    gap: var(--space-sm);
    width: 100%;
    padding: var(--space) 0;
  }

  .navigation.mobile a {
    font-size: 1.1rem;
    padding: 12px 20px;
    border-radius: 25px;
    border: 1px solid transparent;
    transition: var(--transition);
    background: rgba(255, 255, 255, 0.9);
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    margin-bottom: var(--space-sm);
    color: var(--color-text) !important;
    min-height: 44px;
    font-weight: 400;
  }

  .navigation.mobile a:hover {
    color: var(--color-secondary);
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-1px);
  }

  .navigation.mobile a.active {
    background: var(--gradient-primary);
    color: var(--color-white);
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.2);
  }

  .navigation.mobile a.active::after {
    display: none;
  }

  /* ===== GOLD NAVIGATION LINK ===== */
  .nav-book-now {
    background: transparent;
    font-weight: 500 !important;
    position: relative;
    padding: 6px 12px !important;
    border-radius: 20px !important;
    color: #2c2c2c !important;
    -webkit-text-fill-color: #2c2c2c !important;
    border: none;
    font-size: 0.9rem !important;
    letter-spacing: 0.02em;
  }

  .nav-book-now:hover {
    background: rgba(139, 115, 85, 0.05);
    transform: translateY(-1px);
  }

  .nav-book-now.active {
    background: var(--gradient-primary);
    color: var(--color-white) !important;
    -webkit-text-fill-color: var(--color-white) !important;
    font-weight: 500 !important;
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.2);
  }

  /* Remove the brown underline for Book Now link */
  .nav-book-now::after {
    display: none !important;
  }

  /* Override the navigation underline for Book Now link */
  .nav-link.nav-book-now::after {
    display: none !important;
  }

  .navigation a.nav-book-now::after {
    display: none !important;
  }

  /* Mobile navigation styling */
  .navigation.mobile .nav-book-now {
    background: transparent !important;
    color: #2c2c2c !important;
    -webkit-text-fill-color: #2c2c2c !important;
    font-weight: 500 !important;
    padding: 12px 20px !important;
    border-radius: 25px !important;
    border: none;
    font-size: 1rem !important;
    letter-spacing: 0.02em;
  }

  .navigation.mobile .nav-book-now.active {
    background: var(--gradient-primary) !important;
    color: var(--color-white) !important;
    -webkit-text-fill-color: var(--color-white) !important;
    font-weight: 500 !important;
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.2);
  }

  /* Guide navigation styling */
  .guide-nav {
    justify-content: center;
    width: 100%;
  }

  .guide-nav .back-home {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .guide-nav .back-home:hover {
    color: var(--color-text);
    transform: translateX(-2px);
  }
</style>

<script>
  // Only run navigation logic on index page
  if (!window.location.pathname.includes('/guide')) {
    // Active navigation functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize for both desktop and mobile navigation
      const navLinks = Array.from(document.querySelectorAll('.nav-link')) as HTMLAnchorElement[];
      const sections = Array.from(document.querySelectorAll('section[id]')) as HTMLElement[];
      
      console.log('Navigation initialized with', navLinks.length, 'links and', sections.length, 'sections');
      let scrollTimeout: ReturnType<typeof setTimeout>;
      let lastScrollPosition = 0;
      let isNavigating = false;
      
      function updateActiveNav() {
        const scrollPosition = window.scrollY + window.innerHeight / 3; // Use 1/3 of viewport height as trigger point
        const firstSectionTop = sections.length ? sections[0].offsetTop : 0;

        // While above first section (still in hero), no link should be active
        if (scrollPosition < firstSectionTop) {
          navLinks.forEach((link) => link.classList.remove('active'));
          return;
        }

        // Find the current section based on scroll position
        let currentSection: HTMLElement | null = null;
        
        for (let i = sections.length - 1; i >= 0; i--) {
          const section = sections[i];
          if (section && section.offsetTop !== undefined) {
            const sectionTop = section.offsetTop;
            
            if (scrollPosition >= sectionTop) {
              currentSection = section;
              break;
            }
          }
        }

        if (currentSection) {
          const sectionId = currentSection.getAttribute('id');
          if (sectionId) {
            // Remove active class from all nav links
            navLinks.forEach((link) => link.classList.remove('active'));
            
            // Add active class to corresponding nav link
            const activeLink = document.querySelector(`.nav-link[href="#${sectionId}"]`) as HTMLAnchorElement | null;
            if (activeLink) {
              activeLink.classList.add('active');
              console.log('Set active:', sectionId, 'on link:', activeLink.textContent);
            } else {
              console.log('No active link found for section:', sectionId);
            }
          }
        }
      }
      
      // Debounced scroll handler to prevent intermediate activations
      function handleScroll() {
        // Don't update active nav during programmatic navigation
        if (isNavigating) return;
        
        const currentScrollPosition = window.scrollY;
        const scrollDifference = Math.abs(currentScrollPosition - lastScrollPosition);
        
        // Only update if there's significant scroll movement or after scrolling stops
        if (scrollDifference > 50) {
          clearTimeout(scrollTimeout);
          scrollTimeout = setTimeout(() => {
            updateActiveNav();
          }, 100);
        }
        
        lastScrollPosition = currentScrollPosition;
      }
      
      // Handle navigation clicks - immediately set active state
      navLinks.forEach((link) => {
        link.addEventListener('click', () => {
          const href = link.getAttribute('href');
          if (href && href.startsWith('#')) {
            isNavigating = true;
            
            // Immediately set the clicked link as active
            navLinks.forEach((navLink) => navLink.classList.remove('active'));
            link.classList.add('active');
            
            // Reset navigation flag after scroll completes
            setTimeout(() => {
              isNavigating = false;
            }, 1000);
          }
        });
      });
      
      // Update on scroll with debouncing
      window.addEventListener('scroll', handleScroll);
      
      // Update on page load
      updateActiveNav();
    });
  }
</script>


