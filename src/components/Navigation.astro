---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<nav class={`navigation ${className}`}>
  <a href="#about" data-i18n="nav.about" class="nav-link">About</a>
  <a href="#gallery" data-i18n="nav.gallery" class="nav-link">Gallery</a>
  <a href="#location" data-i18n="nav.location" class="nav-link">Location</a>
  <a href="#booking" data-i18n="nav.bookNow" class="nav-link">Book Now</a>
  <a href="#contact" data-i18n="nav.contact" class="nav-link">Contact</a>
</nav>

<script>
  // Active navigation functionality
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = Array.from(document.querySelectorAll('.nav-link')) as HTMLAnchorElement[];
    const sections = Array.from(document.querySelectorAll('section[id]')) as HTMLElement[];
    let scrollTimeout: ReturnType<typeof setTimeout>;
    let lastScrollPosition = 0;
    let isNavigating = false;
    
    function updateActiveNav() {
      const headerEl = document.querySelector('.header') as HTMLElement | null;
      const headerHeight = headerEl?.offsetHeight || 0;
      const scrollPosition = window.scrollY + headerHeight; // Offset for actual header height
      const firstSectionTop = sections.length ? sections[0].offsetTop : 0;

      // While above first section (still in hero), no link should be active
      if (scrollPosition < firstSectionTop) {
        navLinks.forEach((link) => link.classList.remove('active'));
        return;
      }

      // Find the section that's most visible in the viewport
      let mostVisibleSection: HTMLElement | null = null;
      let maxVisibility = 0;

      sections.forEach((section) => {
        const sectionTop = (section as HTMLElement).offsetTop;
        const sectionHeight = (section as HTMLElement).offsetHeight;
        const sectionBottom = sectionTop + sectionHeight;
        
        // Calculate how much of the section is visible
        const visibleTop = Math.max(sectionTop, scrollPosition);
        const visibleBottom = Math.min(sectionBottom, scrollPosition + window.innerHeight);
        const visibleHeight = Math.max(0, visibleBottom - visibleTop);
        const visibility = visibleHeight / sectionHeight;
        
        if (visibility > maxVisibility) {
          maxVisibility = visibility;
          mostVisibleSection = section as HTMLElement;
        }
      });

      if (mostVisibleSection) {
        const sectionId = mostVisibleSection.getAttribute('id');
        if (sectionId) {
          // Remove active class from all nav links
          navLinks.forEach((link) => link.classList.remove('active'));
          
          // Add active class to corresponding nav link
          const activeLink = document.querySelector(`.nav-link[href="#${sectionId}"]`) as HTMLAnchorElement | null;
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      }
    }
    
    // Debounced scroll handler to prevent intermediate activations
    function handleScroll() {
      // Don't update active nav during programmatic navigation
      if (isNavigating) return;
      
      const currentScrollPosition = window.scrollY;
      const scrollDifference = Math.abs(currentScrollPosition - lastScrollPosition);
      
      // Only update if there's significant scroll movement or after scrolling stops
      if (scrollDifference > 50) {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          updateActiveNav();
        }, 100);
      }
      
      lastScrollPosition = currentScrollPosition;
    }
    
    // Handle navigation clicks - immediately set active state
    navLinks.forEach((link) => {
      link.addEventListener('click', () => {
        const href = link.getAttribute('href');
        if (href && href.startsWith('#')) {
          isNavigating = true;
          
          // Immediately set the clicked link as active
          navLinks.forEach((navLink) => navLink.classList.remove('active'));
          link.classList.add('active');
          
          // Reset navigation flag after scroll completes
          setTimeout(() => {
            isNavigating = false;
          }, 1000);
        }
      });
    });
    
    // Update on scroll with debouncing
    window.addEventListener('scroll', handleScroll);
    
    // Update on page load
    updateActiveNav();
  });
</script>


