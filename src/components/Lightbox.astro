---
import { X, ChevronLeft, ChevronRight } from 'lucide-astro';

interface LightboxImage {
  src: string;
  alt: string;
  description?: string;
}

interface Props {
  id?: string;
  images?: LightboxImage[];
}

const { id = "lightbox", images = [] } = Astro.props;
---

<div id={id} class="lightbox">
  <div class="lightbox-content">
    <button class="lightbox-control lightbox-close" aria-label="Close lightbox">
      <X size={24} />
    </button>
    <div class="lightbox-control lightbox-counter" id="lightbox-counter"></div>
    <img id="lightbox-image" class="lightbox-image" src="" alt="">
    <p id="lightbox-text"></p>
    <button class="lightbox-control lightbox-prev" aria-label="Previous image">
      <ChevronLeft size={24} />
    </button>
    <button class="lightbox-control lightbox-next" aria-label="Next image">
      <ChevronRight size={24} />
    </button>
  </div>
</div>

<script define:vars={{ lightboxId: id, imageData: images }}>
  // Lightbox functionality
  document.addEventListener('DOMContentLoaded', () => {
    const lightbox = document.getElementById(lightboxId);
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxText = document.getElementById('lightbox-text');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = lightbox?.querySelector('.lightbox-close');
    const lightboxPrev = lightbox?.querySelector('.lightbox-prev');
    const lightboxNext = lightbox?.querySelector('.lightbox-next');
    
    let currentImageIndex = 0;
    
    // Open lightbox function
    window.openLightbox = function(index) {
      if (!lightbox || !lightboxImage || !lightboxText || !imageData[index]) return;
      
      currentImageIndex = index;
      lightboxImage.src = imageData[index].src;
      lightboxImage.alt = imageData[index].alt;
      lightboxText.textContent = imageData[index].description || imageData[index].alt;
      
      // Update counter
      if (lightboxCounter) {
        lightboxCounter.textContent = `${currentImageIndex + 1}/${imageData.length}`;
      }
      
      lightbox.classList.add('active');
    };
    
    // Close lightbox function
    function closeLightbox() {
      if (lightbox) {
        lightbox.classList.remove('active');
      }
    }
    
    // Navigation functions
    function showPrevImage() {
      currentImageIndex = (currentImageIndex - 1 + imageData.length) % imageData.length;
      openLightbox(currentImageIndex);
    }
    
    function showNextImage() {
      currentImageIndex = (currentImageIndex + 1) % imageData.length;
      openLightbox(currentImageIndex);
    }
    
    // Event listeners
    if (lightboxClose) {
      lightboxClose.addEventListener('click', closeLightbox);
    }
    
    if (lightboxPrev) {
      lightboxPrev.addEventListener('click', showPrevImage);
    }
    
    if (lightboxNext) {
      lightboxNext.addEventListener('click', showNextImage);
    }
    
    if (lightbox) {
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox || !lightbox?.classList.contains('active')) return;
      
      switch(e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          showPrevImage();
          break;
        case 'ArrowRight':
          showNextImage();
          break;
      }
    });
  });
</script>



