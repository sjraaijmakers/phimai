---
import { X, ChevronLeft, ChevronRight } from 'lucide-astro';

interface LightboxImage {
  src: string;
  caption?: string;
}

interface Props {
  id?: string;
  images?: LightboxImage[];
}

const { id = "lightbox", images = [] } = Astro.props;
---

<div id={id} class="lightbox">
  <div class="lightbox-content">
    <button class="lightbox-control lightbox-close" aria-label="Close lightbox">
      <X size={24} />
    </button>
    <div class="lightbox-counter" id="lightbox-counter"></div>
    <img id="lightbox-image" class="lightbox-image" src="" alt="">
    <p id="lightbox-text" class="lightbox-text"></p>
    <button class="lightbox-control lightbox-prev" aria-label="Previous image">
      <ChevronLeft size={24} />
    </button>
    <button class="lightbox-control lightbox-next" aria-label="Next image">
      <ChevronRight size={24} />
    </button>
  </div>
</div>

<script define:vars={{ lightboxId: id, imageData: images }}>
  // Lightbox functionality
  document.addEventListener('DOMContentLoaded', () => {
    const lightbox = document.getElementById(lightboxId);
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxText = document.getElementById('lightbox-text');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = lightbox?.querySelector('.lightbox-close');
    const lightboxPrev = lightbox?.querySelector('.lightbox-prev');
    const lightboxNext = lightbox?.querySelector('.lightbox-next');
    
    let currentImageIndex = 0;
    let previousScrollY = 0;
    let touchStartX = 0;
    let touchStartY = 0;
    let touchActive = false;

    function lockPageScroll() {
      previousScrollY = window.scrollY || document.documentElement.scrollTop || 0;
      document.documentElement.classList.add('no-scroll');
      document.body.classList.add('no-scroll');
      document.body.style.top = `-${previousScrollY}px`;
    }

    function unlockPageScroll() {
      document.documentElement.classList.remove('no-scroll');
      document.body.classList.remove('no-scroll');
      document.body.style.top = '';
      // Temporarily disable smooth scrolling and restore position instantly
      const originalScrollBehavior = document.documentElement.style.scrollBehavior;
      document.documentElement.style.scrollBehavior = 'auto';
      window.scrollTo(0, previousScrollY);
      // Restore original scroll behavior
      document.documentElement.style.scrollBehavior = originalScrollBehavior;
    }
    
    // Initialize global lightbox manager if it doesn't exist
    if (!window.lightboxManager) {
      window.lightboxManager = {};
    }
    
         // Register this lightbox with the global manager
     window.lightboxManager[lightboxId] = {
       lightbox,
       imageData,
       currentImageIndex: 0,
       lockPageScroll,
       unlockPageScroll
     };
     
     console.log('Lightbox registered:', lightboxId, 'with', imageData.length, 'images');
    
         // Global open lightbox function (only set once)
     if (!window.openLightbox) {
       window.openLightbox = function(index, targetLightboxId) {
         console.log('openLightbox called:', { index, targetLightboxId });
         
         const manager = window.lightboxManager[targetLightboxId];
         console.log('Manager found:', !!manager, 'Manager data:', manager?.imageData?.length);
         
         if (!manager || !manager.imageData[index]) return;
         
         const { lightbox, imageData, lockPageScroll } = manager;
         const lightboxImage = lightbox.querySelector('#lightbox-image');
         const lightboxText = lightbox.querySelector('#lightbox-text');
         const lightboxCounter = lightbox.querySelector('#lightbox-counter');
         
         if (!lightboxImage || !lightboxText) return;
         
         console.log('Setting image:', { index, src: imageData[index].src });
         manager.currentImageIndex = index;
         lightboxImage.src = imageData[index].src;
         const desc = imageData[index].caption || '';
         lightboxImage.alt = desc || '';
        
        if (desc && desc.trim().length > 0) {
          lightboxText.textContent = desc;
          lightboxText.style.display = '';
        } else {
          lightboxText.textContent = '';
          lightboxText.style.display = 'none';
        }
        
        // Update counter
        if (lightboxCounter) {
          lightboxCounter.textContent = `${index + 1}/${imageData.length}`;
        }
        
        if (!lightbox.classList.contains('active')) {
          lightbox.classList.add('active');
          lockPageScroll();
        }
      };
    }
    
    // Close lightbox function
    function closeLightbox() {
      const activeLightbox = document.querySelector('.lightbox.active');
      if (activeLightbox) {
        activeLightbox.classList.remove('active');
        unlockPageScroll();
      }
    }
    
    // Navigation functions
    function showPrevImage() {
      const manager = window.lightboxManager[lightboxId];
      if (!manager) return;
      
      manager.currentImageIndex = (manager.currentImageIndex - 1 + manager.imageData.length) % manager.imageData.length;
      window.openLightbox(manager.currentImageIndex, lightboxId);
    }
    
    function showNextImage() {
      const manager = window.lightboxManager[lightboxId];
      if (!manager) return;
      
      manager.currentImageIndex = (manager.currentImageIndex + 1) % manager.imageData.length;
      window.openLightbox(manager.currentImageIndex, lightboxId);
    }
    
         // Event listeners
     if (lightboxClose) {
       lightboxClose.addEventListener('click', closeLightbox);
     }
     
     if (lightboxPrev) {
       lightboxPrev.addEventListener('click', showPrevImage);
     }
     
     if (lightboxNext) {
       lightboxNext.addEventListener('click', showNextImage);
     }
     
     // Listen for custom open lightbox events
     if (lightbox) {
       lightbox.addEventListener('openLightbox', (e) => {
         const { index, lightboxId: targetLightboxId } = e.detail;
         console.log('Lightbox event received:', { index, targetLightboxId, currentLightboxId: lightboxId });
         
         if (targetLightboxId === lightboxId) {
           const manager = window.lightboxManager[lightboxId];
           if (!manager || !manager.imageData[index]) return;
           
           const { imageData, lockPageScroll } = manager;
           const lightboxImage = lightbox.querySelector('#lightbox-image');
           const lightboxText = lightbox.querySelector('#lightbox-text');
           const lightboxCounter = lightbox.querySelector('#lightbox-counter');
           
           if (!lightboxImage || !lightboxText) return;
           
           console.log('Setting image in lightbox:', { index, src: imageData[index].src });
           manager.currentImageIndex = index;
           lightboxImage.src = imageData[index].src;
           const desc = imageData[index].caption || '';
           lightboxImage.alt = desc || '';
           
           if (desc && desc.trim().length > 0) {
             lightboxText.textContent = desc;
             lightboxText.style.display = '';
           } else {
             lightboxText.textContent = '';
             lightboxText.style.display = 'none';
           }
           
           // Update counter
           if (lightboxCounter) {
             lightboxCounter.textContent = `${index + 1}/${imageData.length}`;
           }
           
           if (!lightbox.classList.contains('active')) {
             lightbox.classList.add('active');
             lockPageScroll();
           }
         }
       });
     }
    
    if (lightbox) {
      lightbox.addEventListener('click', (e) => {
        const target = e.target;
        if (!(target instanceof HTMLElement)) return;

        // Ignore clicks on nav/close buttons
        const isNavOrClose = target.closest('.lightbox-prev, .lightbox-next, .lightbox-close') !== null;
        if (isNavOrClose) return;

        // Clicking the image goes to next
        const isImage = target.id === 'lightbox-image' || target.closest('#lightbox-image');
        if (isImage) {
          e.preventDefault();
          showNextImage();
          return;
        }

        // Clicking anywhere else closes
        closeLightbox();
      });

      // Touch swipe for mobile: left→next, right→prev
      lightbox.addEventListener('touchstart', (e) => {
        if (!lightbox.classList.contains('active')) return;
        if (!e.touches || e.touches.length === 0) return;
        touchActive = true;
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
      }, { passive: true });

      lightbox.addEventListener('touchend', (e) => {
        if (!touchActive) return;
        touchActive = false;
        if (!e.changedTouches || e.changedTouches.length === 0) return;
        const dx = e.changedTouches[0].clientX - touchStartX;
        const dy = e.changedTouches[0].clientY - touchStartY;
        const horizontalThreshold = 40; // px
        const verticalTolerance = 80; // px
        if (Math.abs(dx) > horizontalThreshold && Math.abs(dy) < verticalTolerance) {
          if (dx < 0) {
            showNextImage();
          } else {
            showPrevImage();
          }
        }
      }, { passive: true });
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox || !lightbox?.classList.contains('active')) return;
      
      switch(e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          showPrevImage();
          break;
        case 'ArrowRight':
          showNextImage();
          break;
      }
    });
  });
</script>



