---
import { ChevronLeft, ChevronRight, Circle } from 'lucide-astro';
import type { ImageConfig } from '../../data/images';

interface Props {
  id?: string;
  images: ImageConfig[];
  interval?: number; // milliseconds
  showArrows?: boolean;
  showDots?: boolean;
  autoPlay?: boolean;
}

const { 
  id = "carousel", 
  images = [], 
  interval = 5000, 
  showArrows = true, 
  showDots = true, 
  autoPlay = true 
} = Astro.props;
---

<div class="carousel" id={id}>
  <div class="carousel-container">
    {images.map((image, index) => (
             <div class={`carousel-slide ${index === 0 ? 'active' : ''}`} data-index={index}>
         <img 
           src={image.src} 
           alt={image.caption || ''} 
           class="hero-image carousel-image-clickable"
           data-image-index={index}
           onclick="handleCarouselImageClick(this)"
           style="cursor: pointer;"
         >
       </div>
    ))}
  </div>

     {showArrows && images.length > 1 && (
     <>
       <button class="carousel-arrow carousel-prev" aria-label="Previous" onclick={`carouselPrev('${id}')`}>
         <ChevronLeft size={24} />
       </button>
       <button class="carousel-arrow carousel-next" aria-label="Next" onclick={`carouselNext('${id}')`}>
         <ChevronRight size={24} />
       </button>
     </>
   )}

   {showDots && images.length > 1 && (
     <div class="carousel-dots">
       {images.map((_, index) => (
         <button 
           class={`carousel-dot ${index === 0 ? 'active' : ''}`} 
           aria-label={`Go to slide ${index + 1}`}
           onclick={`carouselGoTo('${id}', ${index})`}
         >
           <Circle size={12} />
         </button>
       ))}
     </div>
   )}
</div>

 <script define:vars={{ autoPlayInterval: interval, shouldAutoPlay: autoPlay, carouselImages: images }}>
   // Carousel functionality
   document.addEventListener('DOMContentLoaded', () => {
     
           // Handle carousel image clicks to open lightbox
      window.handleCarouselImageClick = function(imgElement) {
        const imageIndex = parseInt(imgElement.getAttribute('data-image-index'));
        const carousel = imgElement.closest('.carousel');
        const carouselId = carousel.id;
        
        // Find the lightbox within the same guide section
        const guideSection = carousel.closest('.guide-section');
        const lightbox = guideSection?.querySelector('.lightbox');
        
        console.log('Carousel click:', { imageIndex, carouselId, lightboxId: lightbox?.id, guideSectionFound: !!guideSection });
        
        if (lightbox) {
          // Dispatch a custom event to open the lightbox
          const event = new CustomEvent('openLightbox', {
            detail: { index: imageIndex, lightboxId: lightbox.id }
          });
          lightbox.dispatchEvent(event);
        } else {
          console.log('Lightbox not found in guide section');
        }
      };
     // Global carousel functions
     window.carouselPrev = function(carouselId) {
       const carousel = document.getElementById(carouselId);
       if (!carousel) return;
       
       const slides = carousel.querySelectorAll('.carousel-slide');
       const currentSlide = carousel.querySelector('.carousel-slide.active');
       const currentIndex = Array.from(slides).indexOf(currentSlide);
       const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
       showSlide(carousel, prevIndex);
     };
     
     window.carouselNext = function(carouselId) {
       const carousel = document.getElementById(carouselId);
       if (!carousel) return;
       
       const slides = carousel.querySelectorAll('.carousel-slide');
       const currentSlide = carousel.querySelector('.carousel-slide.active');
       const currentIndex = Array.from(slides).indexOf(currentSlide);
       const nextIndex = (currentIndex + 1) % slides.length;
       showSlide(carousel, nextIndex);
     };
     
     window.carouselGoTo = function(carouselId, index) {
       const carousel = document.getElementById(carouselId);
       if (!carousel) return;
       showSlide(carousel, index);
     };
     
     function showSlide(carousel, index) {
       const slides = carousel.querySelectorAll('.carousel-slide');
       const dots = carousel.querySelectorAll('.carousel-dot');
       
       // Hide all slides and dots
       slides.forEach(slide => slide.classList.remove('active'));
       dots.forEach(dot => dot.classList.remove('active'));
       
       // Show current slide and dot
       if (slides[index]) slides[index].classList.add('active');
       if (dots[index]) dots[index].classList.add('active');
     }
     
     // Auto-play functionality
     const carousels = document.querySelectorAll('.carousel');
     carousels.forEach(carousel => {
       if (!shouldAutoPlay) return;
       
       const slides = carousel.querySelectorAll('.carousel-slide');
       if (slides.length <= 1) return;
       
       let intervalId = null;
       
       function nextSlide() {
         const currentSlide = carousel.querySelector('.carousel-slide.active');
         const currentIndex = Array.from(slides).indexOf(currentSlide);
         const nextIndex = (currentIndex + 1) % slides.length;
         showSlide(carousel, nextIndex);
       }
       
       function startAutoPlay() {
         intervalId = setInterval(nextSlide, autoPlayInterval);
       }
       
       function stopAutoPlay() {
         if (intervalId) {
           clearInterval(intervalId);
           intervalId = null;
         }
       }
       
       // Pause autoplay on hover
       carousel.addEventListener('mouseenter', stopAutoPlay);
       carousel.addEventListener('mouseleave', startAutoPlay);
       
       // Start autoplay
       startAutoPlay();
     });
   });
 </script>


