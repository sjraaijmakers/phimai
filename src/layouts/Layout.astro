---
import '../assets/styles.css';
import { ClientRouter } from 'astro:transitions';
import i18next, { t, changeLanguage } from 'i18next';

export interface Props {
  lang?: string;
}

const { lang = 'en' } = Astro.props;

// Set language for i18next
changeLanguage(lang);
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Metadata -->
    <title>{t('seo.title')}</title>
    <meta name="description" content={t('seo.description')} />
    <meta name="keywords" content={t('seo.keywords')} />
    <meta property="og:title" content={t('seo.title')} />
    <meta property="og:description" content={t('seo.description')} />
    <meta property="og:image" content={t('seo.image')} />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={t('seo.locale')} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={t('seo.title')} />
    <meta name="twitter:description" content={t('seo.description')} />
    <meta name="twitter:image" content={t('seo.image')} />

    <!-- Language and Canonical -->
    <link rel="canonical" href={t('seo.canonical')} />
    <link rel="alternate" hreflang="en" href={t('seo.hreflang.en')} />
    <link rel="alternate" hreflang="th" href={t('seo.hreflang.th')} />
    <link rel="alternate" hreflang="x-default" href={t('seo.hreflang.en')} />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:wght@400;600&display=swap"
      rel="stylesheet"
    />

    <ClientRouter />
  </head>
  <body>
    <div id="top"></div>
    <main class="main-content">
      <slot />
    </main>

    <script>
      // Set dynamic header height and handle anchor scrolling
      document.addEventListener('DOMContentLoaded', () => {
        // Set dynamic header height
        const updateHeaderHeight = () => {
          const headerEl = document.querySelector(
            '.header'
          ) as HTMLElement | null;
          if (headerEl) {
            const headerHeight = headerEl.offsetHeight;
            document.documentElement.style.setProperty(
              '--header-height',
              `${headerHeight}px`
            );
          }
        };

        // Initial setup
        updateHeaderHeight();

        // Update on resize
        window.addEventListener('resize', updateHeaderHeight);

        // Global smooth anchor scrolling with header offset
        document.querySelectorAll('a[href^="#"]').forEach(anchorEl => {
          anchorEl.addEventListener('click', e => {
            const href = (e.currentTarget as HTMLAnchorElement).getAttribute(
              'href'
            );
            if (!href) return;
            const target = document.querySelector(href) as HTMLElement | null;
            if (!target) return;
            e.preventDefault();
            const headerEl = document.querySelector(
              '.header'
            ) as HTMLElement | null;
            const headerHeight = headerEl?.offsetHeight || 0;
            const top =
              href === '#top'
                ? 0
                : Math.max(0, target.offsetTop - headerHeight);
            window.scrollTo({ top, behavior: 'smooth' });
          });
        });
      });
    </script>
  </body>
</html>

<style is:global>
  /* ===== GLOBAL ANIMATIONS ===== */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* ===== ANIMATION UTILITY CLASSES ===== */
  .fade-in {
    animation: fadeIn 0.6s ease-out;
  }

  /* ===== GLOBAL UTILITIES ===== */
  .main-content {
    padding-top: var(--header-height);
  }

  /* Smooth transitions for all interactive elements */
  * {
    transition:
      color 0.3s ease,
      background-color 0.3s ease,
      border-color 0.3s ease,
      transform 0.3s ease;
  }

  /* Focus styles for accessibility */
  a:focus,
  button:focus,
  input:focus,
  select:focus,
  textarea:focus {
    outline: none;
  }

  /* ===== REUSABLE IMAGE HOVER EFFECTS ===== */
  .image-hover-zoom {
    overflow: hidden;
  }

  .image-hover-zoom img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .image-hover-zoom:hover img {
    transform: scale(1.05);
  }
</style>
